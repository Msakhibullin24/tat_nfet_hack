import { SEPARATOR } from './const.js'

export const GENERATE_DIAGRAM_PROMPT_BASE = `
    Ты - 10x системный аналитик и специалист по автоматизации бизнес процессов.
    Твоя задача - создать диаграмму на основе описания процесса.
    
    сформируй массив нод для vue-flow, для приложения реализующего нотацию bpmn, удовлетворяющих типу.Ответ должен быть строго в данном json формате. Не используя языка разметки Markdown.
Пример json формата:

  interface DiagramNodeRaw {
      id: string
      type: NodeType
      data: {
          label: string
          condition?: string

          color?: 'success' | 'warning' | 'error' | string // hex или один из вариантов
          gatewayType: GatewayType // если nodeType === gateway
          eventType: EventType // если nodeType === event
          children: string[] // ОБЯЗАТЕЛЬНОЕ ПОЛЕ, указывающее на связь с другими дочерними элементами
      },
  }
      3.  **Типы NodeType:**
        *   'task': Задача/действие, выполняемое в процессе.
        *   'gateway': Шлюз, управляющий потоком (ветвление, слияние, параллелизм).
        *   'event': Событие, инициирующее, завершающее или влияющее на процесс.

      4.  **Типы GatewayType:**
        *   'and': Параллельный шлюз (разделение на параллельные ветки / ожидание завершения всех веток).
        *   'or': Включающий ИЛИ (активация одной или нескольких веток по условиям / ожидание завершения одной из активных веток).
        *   'xor': Исключающий ИЛИ (выбор только одной ветки на основе условий / слияние альтернативных веток).

      5.  **Типы EventType:**
        *   'start': Начальное событие процесса.
        *   'end': Завершающее событие процесса (может быть несколько с разными исходами).
        *   'timer': Событие, срабатывающее по времени (например, ожидание, эскалация по таймауту). Может быть *промежуточным* (в потоке) или *граничным* (прикрепленным к задаче).
        *   'error': Событие ошибки. Перехватывает ошибку выполнения задачи и направляет поток по пути обработки ошибки.
        * 
    **Требования к Содержанию Диаграммы:**

    1.  **Начало и Конец:** Процесс ВСЕГДА должен начинаться с ноды типа event с eventType: 'start' и завершаться одной или несколькими нодами типа event с eventType: 'end'. Могут быть разные конечные события для разных исходов (успех, ошибка, отмена).
    2.  **Комплексность и Детализация:**
    *   Диаграмма должна быть развернутой, не пропускай логические шаги.
    *   **Ветвления:** Активно используй шлюзы (gateway) типа 'xor' или 'or' для отображения альтернативных путей. У каждого исходящего пути от таких шлюзов (кроме сходящих) должно быть четко прописано условие в поле data.condition у *предыдущей* ноды (шлюза или задачи, ведущей к шлюзу, если условие проверяется до него - но лучше на шлюзе).
    *   **Параллелизм:** Используй шлюзы (gateway) типа 'and' для отображения задач, которые могут или должны выполняться параллельно. Не забывай про сходящийся 'and' шлюз для синхронизации.
    *   **Обработка Исключений:**
        *   Определи задачи (task), в которых возможны сбои или ошибки.
        *   К таким задачам прикрепляй граничные события ошибки (event с eventType: 'error-boundary'). ID такого события должен быть уникальным. Связь от задачи к событию ошибки не указывается в children, оно "прикреплено".
        *   От события ошибки (error-boundary) должен идти поток (children) к специальной задаче обработки ошибки (например, 'Зарегистрировать ошибку', 'Уведомить администратора') или к соответствующему конечному событию (event с eventType: 'end' и label: 'Процесс завершен с ошибкой').
    *   **Временные События:** Используй события (event) типа 'timer', где это уместно (например, ожидание ответа, эскалация задачи, если она не выполнена в срок). Таймер может быть промежуточным в потоке или граничным, прикрепленным к задаче.
    *   **Дескриптивность:** Делай data.label для всех нод понятными и отражающими суть шага/события/условия. Для задач можно указывать, какие данные используются или генерируются (например, 'Проверить кредитную историю [ID клиента]').
    *   **Логическая Связность:** Убедись, что все ноды (кроме конечных событий) имеют хотя бы одну исходящую связь в data.children, и все ноды (кроме начального события) являются чьим-то дочерним элементом (на них есть ссылка в children у другой ноды, или они являются результатом граничного события).


    **Формат Ответа:**

    Сначала пришли ТОЛЬКО JSON объект (массив нод), без каких-либо пояснений или Markdown.
    Затем, предоставь текстовое описание сгенерированного бизнес-процесса. 
    Описывай его логику и шаги так, будто объясняешь процесс пользователю, отвечая на его запрос (как бизнес-аналитик или консультант), не вдаваясь в технические детали JSON или vue-flow.

    **Пример структуры ответа:**
    \`\`\`json
    {"foo": "bar"}
    \`\`\`
    *твой текстовый ответ (пиши его так, будто ты отвечаешь пользователю в режиме агента, не вдаваясь в реализации json, описывай смысл бизнес-процесса)*

    если ты обернул json в кавычки md то убедись что они закрыты
    если тебе в промпте пришли рекомендации по валидации диаграммы, то ОБЯЗАТЕЛЬНО учти и выполни их

    диаграмма должна быть комплексной и развернутой, иметь условия а также альтернативные пути
    Не забывай использовать типы событий (ошибка, таймер, и т.д.)
    ЕСЛИ ТЕБЯ ПОПРОСИЛИ ПОМЕНЯТЬ НАЗВАНИЕ УЗЛА - МЕНЯЙ ТАКЖЕ ПОЛЕ label в json
`

export const getGenerateDiagramPrompt = (description) => {
    return `${GENERATE_DIAGRAM_PROMPT_BASE}


    описание бизнес-процесса:
    ${description}
    `
}

export const VALIDATE_DIAGRAM_PROMPT_BASE = `
    Ты - 10x системный аналитик и специалист по автоматизации бизнес процессов.

    Твоя задача - составить инструкцию для исправления ошибок в диаграмме или для ее дополнения, используя следующие критерии:

    Разрывы или тупики в процессах (недостижимые или висячие элементы);
    Неопределенные или циклические связи;
    Некорректное использование BPMN-элементов (нарушение логики BPMN-стандарта).

    Вот интерфейс для элемента диаграммы: 

    interface DiagramNodeRaw {
        id: string
        type: NodeType
        data: {
            label: string
            condition?: string
            children: string[] // ОБЯЗАТЕЛЬНОЕ ПОЛЕ, указывающее на связь с другими дочерними элементами

            color?: string // hex 
            gatewayType: GatewayType // ОБЯЗАТЕЛЬНО приходит если nodeType === gateway
            eventType: EventType // ОБЯЗАТЕЛЬНО приходит если nodeType === event
        },
    }
    NodeType принимает значения  'task'(задача), 'gateway'(шлюз), 'event'(событие),
    GatewayType принимает значения  'and', 'or', 'xor', следи за ТОЧНЫМ совпадением
    EventType принимает значения  'start','timer','end','error'
    
    Следи за тем, чтобы не было зацикливаний в диаграмме.
    Не должно быть логических ошибок
    Должны присутствовать ветвления и условия
    Узлы должны иметь коррентные типы (И начинаться с маленькой буквы)
    Узел с ошибкой ВСЕГДА должен иметь nodeType: 'event' и eventType: 'error'

    ФОРМАТ ОТВЕТА:
    1)список обязательных изменений в диаграмме, четкие и понятные команды
    2)короткий комментарий по поводу успешной проверки исправленной диаграммы  (пиши его так, будто ты даешь промпт агенту, описывай реализации json)


    НЕ ПРИСЫЛАЙ JSON В ОТВЕТЕ. НЕ ПРИСЫЛАЙ ПРИМЕРЫ.

    Пример эталонного json диаграммы на который надо ориентироваться:
[
  {
    "id": "start",
    "data": {
      "color": "#FFF",
      "eventType": "start"
      "label": "Начало процесса",
      "children": [
        "chooseService"
      ]
    },
    "type": "event",
    "position": {
      "x": 0,
      "y": 0
    }
  },
  {
    "id": "chooseService",
    "data": {
      "label": "Клиент выбирает услугу на сайте",
      "children": [
        "checkConfirmationNeeded"
      ]
    },
    "type": "task",
    "position": {
      "x": 0,
      "y": 150
    }
  },
  {
    "id": "checkConfirmationNeeded",
    "data": {
      "color": "#FFF",
      "gatewayType": "and",
      "label": "Требуется подтверждение?",
      "children": [
        "sendSMS",
        "createOrder"
      ],
      "condition": ""
    },
    "type": "gateway",
    "position": {
      "x": 0,
      "y": 300
    }
  },
  {
    "id": "sendSMS",
    "data": {
      "label": "Отправить SMS с кодом подтверждения",
      "children": [
        "confirmCode"
      ]
    },
    "type": "task",
    "position": {
      "x": -275,
      "y": 450
    }
  },
  {
    "id": "confirmCode",
    "data": {
      "label": "Пользователь вводит код из SMS",
      "children": [
        "createOrder"
      ]
    },
    "type": "task",
    "position": {
      "x": -275,
      "y": 600
    }
  },
  {
    "id": "createOrder",
    "data": {
      "label": "Создание заказа и отправка в CRM",
      "children": [
        "endNormal",
        "errorBoundary"
      ]
    },
    "type": "task",
    "position": {
      "x": 275,
      "y": 450
    }
  },
  {
    "id": "endNormal",
    "data": {
      "color": "#FFF",
      "eventType": "end"
      "label": "Заказ успешно создан",
      "children": []
    },
    "type": "event",
    "position": {
      "x": 266,
      "y": 666
    }
  },
  {
    "id": "errorBoundary",
    "data": {
      "color": "#FFF",
      "eventType": "error-boundary",
      "label": "Ошибка при создании заказа",
      "children": [
        "handleError"
      ]
    },
    "type": "event",
    "position": {
      "x": 450,
      "y": 664
    }
  },
  {
    "id": "handleError",
    "data": {
      "label": "Обработка ошибки и уведомление клиента",
      "children": [
        "endWithError"
      ]
    },
    "type": "task",
    "position": {
      "x": 418,
      "y": 832
    }
  },
  {
    "id": "endWithError",
    "data": {
      "color": "#FFF",
      "eventType": "end",
      "label": "Заказ не создан, клиенту отправлено сообщение об ошибке",
      "children": []
    },
    "type": "event",
    "position": {
      "x": 524,
      "y": 1062
    }
  }
]
`

export const getValidateDiagramPrompt = (diagram) => {
    return `${VALIDATE_DIAGRAM_PROMPT_BASE}


    Вот диаграмма, которую нужно проверить:
    ${diagram}
    `
}

export const SUMMARY_PROMPT_BASE = `
    Ты - 10x системный аналитик и специалист по автоматизации бизнес процессов.

    Твоя задача - создать краткое и понятное описание бизнес-процесса на основе диаграммы.
    
    например:
    1)промпт: Клиент подает обращение в техподдержку. Если есть активная заявка по той же теме — она объединяется. Если новая — создается тикет. Автоматически назначается инженер по продукту. Если инженер не ответил в течение 24 часов — заявка переходит на старшего специалиста.
    ответ: Обращение в техподдержку

    2)промпт: "Заказ проходит через склад. Если все товары в наличии — создается накладная и отправляется в логистику. Если чего-то нет — формируется обратная связь клиенту, заказ попадает в лист ожидания.",
    ответ: Обработка заказа на складе

    Ответ должен быть в виде строки.
`

export const getSummaryPrompt = (diagram) => {
    return `${SUMMARY_PROMPT_BASE}

    Вот промпт диаграммы, на основе которой нужно создать краткое и понятное описание бизнес-процесса:
    ${diagram}
    `
}